#version 130

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;


out vec4 out_Color;


uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;


uniform vec3 lightColour;
uniform float ambientLight;
uniform float shineDamper;
uniform float reflectivity;


uniform vec3 skyColour;


void main(){

	if(visibility < 0.1){
		discard;
	}
	
	
	vec4 blendMapColour = texture2D(blendMap, pass_textureCoords);
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_textureCoords * 100.0;
	vec4 backgroundTextureColour = texture2D(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture2D(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture2D(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture2D(bTexture, tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToLightVector = normalize(toLightVector);
	float ndot = dot(unitNormal, unitToLightVector);
	float brightness = max(ndot, ambientLight);
	
	vec3 diffuse = brightness * lightColour;
	
	
	//specular light
	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitToLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	float specularFactor = dot(reflectedLightDirection, unitToCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	//out_Color = vec4(0.0, 0.4, 1.0, 1.0);
	out_Color = vec4(diffuse, 1.0) * totalColour + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
	
}