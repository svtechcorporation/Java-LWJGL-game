#version 130

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;


uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float ambientLight;
uniform float shineDamper;
uniform float reflectivity;

uniform vec3 skyColour;


void main(){
	
	if(visibility < 0.1){
		discard;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToLightVector = normalize(toLightVector);
	float ndot = dot(unitNormal, unitToLightVector);
	float brightness = max(ndot, ambientLight);
	
	vec3 diffuse = brightness * lightColour;
	
	
	//specular light
	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitToLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	float specularFactor = dot(reflectedLightDirection, unitToCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	
	vec4 textureColour = texture2D(textureSampler, pass_textureCoords);
	
	if(textureColour.a < 0.5){
		discard;
	}
	
	//out_Color = vec4(0.0, 0.4, 1.0, 1.0);
	out_Color = vec4(diffuse, 1.0) *  textureColour + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
	
}